set nocompatible           " use vim settings, rather then vi settings
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set autoindent		   " always set autoindenting on
set smartindent            " be smart about it
set history=100		   " keep 100 lines of command line history
set ruler		   " show the cursor position all the time
"set number                 " line number
set showcmd		   " display incomplete commands
set incsearch		   " do incremental searching
set ignorecase             " ignore case when searching
set shiftwidth=2
set softtabstop=2
set expandtab
set nosmarttab             " fuck tabs
syntax on
set hlsearch               " highlight searches

set nobackup                           " do not keep backups after close
set nowritebackup                      " do not keep a backup while working
set noswapfile                         " don't keep swp files either
" Centralize backups, swapfiles and undo history
set backupdir=$HOME/.vim/backups       " store backups under ~/.vim/backup
set directory=~/.vim/swaps
if exists("&undodir")
  set undodir=~/.vim/undo
endif
set backupcopy=yes                     " keep attributes of original file
set backupskip=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*

set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
"set visualbell             " shut the fuck up

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  "filetype plugin indent on

  " For all text files set 'textwidth' to 80 characters.
  autocmd FileType text setlocal textwidth=80

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif


endif " has("autocmd")


" mouse handling
"set mouse=a

filetype plugin indent on

syntax enable

" solarized:
set background=dark
colorscheme solarized

" nerdtree
let g:nerdtree_tabs_open_on_console_startup = 0
command NT NERDTree

" ctrlp
let g:ctrlp_regexp_search = 1
" let g:ctrlp_clear_cache_on_exit = 0

" ale
let g:ale_linters = {
\   'haskell': ['hlint', 'stack-ghc-mod', 'stack-ghc', 'stack-build'],
\}

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

"let g:ale_open_list = 1

"nmap <silent> <C-k> <Plug>(ale_previous_wrap)
"nmap <silent> <C-j> <Plug>(ale_next_wrap)

" airline
let g:airline#extensions#ale#enabled = 1

if !has("gui_running")
else
" colors
"  highlight string  ctermfg=green   ctermbg=black
"  highlight comment ctermfg=blue   ctermbg=black
"  highlight Normal ctermfg=White
"  highlight Statement ctermfg=white ctermbg=black
"
"  hi Normal guibg=grey80
"  hi Cursor guibg=red
"  highlight NonText guibg=grey60
"  highlight Constant gui=NONE guibg=grey95
"  highlight Special gui=NONE guibg=grey95
"  highlight Cursor guibg=Green guifg=NONE
endif
